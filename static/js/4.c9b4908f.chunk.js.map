{"version":3,"sources":["hoc/withAuthRedirect.tsx","Dialogs/Dialogs.module.css","Dialogs/DialogItem/DialogItem.module.css","Dialogs/MessageItem/MessageItem.module.css","Dialogs/DialogItem/DialogItem.tsx","Dialogs/MessageItem/MessageItem.tsx","Dialogs/Dialogs.tsx","Dialogs/DialogsContainer.tsx","components/common/addMessageForm/AddMessageForm.tsx","components/common/addMessageForm/addMessageForm.module.css"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","restProps","to","React","connect","module","exports","DialogItem","className","s","dialog","active","id","name","MessageItem","message","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messagesElements","messages","m","dialogItems","AddMessageForm","callback","newMessageTextarea","addMessage","compose","dispatch","AddMessageActionCreator","validateUsername","value","error","length","initialValues","newMessage","onSubmit","values","errors","touched","handleSubmit","handleChange","handleBlur","isSubmitting","component","placeholder","validate","style","border","type","disabled"],"mappings":"gPASMA,EAA6B,SAACC,GAAD,MAAwD,CACvFC,OAAQD,EAAME,KAAKD,SAGhB,SAASE,EAAqBC,GAA8B,IACzDC,EADwD,4JAE1D,WACI,MAA+BC,KAAKC,MAA7BN,EAAP,EAAOA,OAAWO,EAAlB,iBACA,OAAIP,EACG,cAACG,EAAD,eAAeI,IADH,cAAC,IAAD,CAAUC,GAAI,eAJqB,GAC9BC,IAAMN,WAStC,OADmCO,YAAQZ,EAARY,CAAoCN,K,oBCrB3EO,EAAOC,QAAU,CAAC,QAAU,2B,oBCA5BD,EAAOC,QAAU,CAAC,YAAc,gCAAgC,OAAS,2BAA2B,OAAS,6B,oBCA7GD,EAAOC,QAAU,CAAC,SAAW,8BAA8B,QAAU,+B,mGCkBtDC,EATI,SAACP,GAChB,OACI,qBAAKQ,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,eAAC,IAAD,CAAST,GAAI,YAAcF,EAAMU,OAAOE,GAAxC,cAA8CZ,EAAMU,OAAOG,W,kBCGxDC,EANK,SAACd,GACjB,OACI,qBAAKQ,UAAWC,IAAEM,QAAlB,SAA4Bf,EAAMe,QAAQA,W,QC+BnCC,EA9BC,SAAChB,GACb,IAAIiB,EAAkBjB,EAAMkB,YAAYC,QAAQC,KAC5C,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAuBX,OAAQW,GAAdA,EAAET,OAIxBU,EAAmBtB,EAAMkB,YAAYK,SAASH,KAC9C,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAwBT,QAASS,GAAfA,EAAEZ,OAQ7B,OACI,sBAAKJ,UAAWC,IAAEU,QAAlB,UACI,qBAAKX,UAAWC,IAAEgB,YAAlB,SACKR,IAEL,sBAAKT,UAAWC,IAAEc,SAAlB,UACKD,EACD,cAACI,EAAA,EAAD,CAAgBC,SAXT,SAACC,GAChB5B,EAAM6B,WAAWD,a,iCCSVE,sBACX1B,aAfoB,SAACX,GACrB,MAAO,CACHyB,YAAazB,EAAMyB,gBAIA,SAACa,GACxB,MAAO,CACHF,WAAY,SAACD,GACTG,EAASC,YAAwBJ,SAQzChC,IAHWkC,CAIbd,I,gCCtCF,2EAaaU,EAAiB,SAAC1B,GAK3B,SAASiC,EAAiBC,GACtB,IAAIC,EAMJ,MALc,KAAVD,IACAC,EAAQ,uBACND,EAAME,OAAS,KACjBD,EAAQ,6BAELA,EAGX,OACI,cAAC,IAAD,CACIE,cAAe,CAACC,WAAY,IAE5BC,SAlBc,SAACC,GACnBxC,EAAM2B,SAASa,EAAOF,aActB,SAKK,cACKE,OADL,IAEKC,EAFL,EAEKA,OACAC,EAHL,EAGKA,QAGAC,GANL,EAIKC,aAJL,EAKKC,WALL,EAMKF,cANL,EAOKG,aAPL,OAUG,sBAAMP,SAAUI,EAAhB,SAEI,gCACI,8BACI,cAAC,IAAD,CACI9B,KAAK,aACLkC,UAAU,WACVC,YAAY,qBACZC,SAAUhB,EACViB,MAAOT,EAAOH,YAAcI,EAAQJ,YAAc,CAACa,OAAQ,qBAGnE,sBAAM3C,UAAWC,IAAE0B,MAAnB,SAA2BM,EAAOH,aAClC,8BACI,wBAAQc,KAAK,SAASC,WAAUZ,EAAOH,WAAvC,8B,mBCzD5BjC,EAAOC,QAAU,CAAC,MAAQ","file":"static/js/4.c9b4908f.chunk.js","sourcesContent":["import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router';\r\nimport {AppStateType} from '../Redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype mapStateToPropsForRedirectType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state:AppStateType):mapStateToPropsForRedirectType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<mapStateToPropsForRedirectType> {\r\n        render() {\r\n            const {isAuth, ...restProps} = this.props\r\n            if(!isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\nconst ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2jTK5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogItems\":\"DialogItem_dialogItems__1Apjg\",\"dialog\":\"DialogItem_dialog__28OyY\",\"active\":\"DialogItem_active__2WbuR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"MessageItem_messages__1W07N\",\"message\":\"MessageItem_message__1ZRqp\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './DialogItem.module.css';\r\nimport {DialogItemType} from '../../Redux/dialogs-reducer';\r\n\r\n\r\ntype DialogItemPropsType ={\r\n    dialog: DialogItemType\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={'/dialogs/' + props.dialog.id}> {props.dialog.name}</NavLink>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './MessageItem.module.css';\r\nimport {MessageItemType} from '../../Redux/dialogs-reducer';\r\n\r\n\r\ntype MessageItemPropsType ={\r\n    message: MessageItemType\r\n}\r\n\r\n\r\nconst MessageItem = (props: MessageItemPropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message.message}</div>\r\n    )\r\n}\r\n\r\nexport default MessageItem;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport MessageItem from './MessageItem/MessageItem';\r\nimport {DialogsPageDataType} from '../Redux/dialogs-reducer';\r\nimport {AddMessageForm} from '../components/common/addMessageForm/AddMessageForm';\r\n\r\nexport type DialogsPagePropsType = {\r\n    addMessage: (newMessageTextarea:string) => void\r\n    dialogsPage: DialogsPageDataType\r\n    isAuth: boolean\r\n}\r\n\r\nconst Dialogs = (props: DialogsPagePropsType) => {\r\n    let dialogsElements = props.dialogsPage.dialogs.map(\r\n        d => <DialogItem key={d.id} dialog={d}\r\n        />\r\n    );\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(\r\n        m => <MessageItem key={m.id} message={m}\r\n        />\r\n    );\r\n\r\n    const addMessage = (newMessageTextarea:string) => {\r\n        props.addMessage(newMessageTextarea)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesElements}\r\n                <AddMessageForm callback={addMessage}\r\n\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {\r\n    AddMessageActionCreator,\r\n    DialogsPageDataType\r\n} from '../Redux/dialogs-reducer';\r\nimport {AppStateType} from '../Redux/redux-store';\r\nimport {withAuthRedirect} from '../hoc/withAuthRedirect';\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: DialogsPageDataType,\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addMessage: (newMessageTextarea:string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageTextarea:string) => {\r\n            dispatch(AddMessageActionCreator(newMessageTextarea));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, AppStateType>(\r\n        mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect,\r\n)(Dialogs)\r\n\r\n\r\n\r\n","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from 'react';\r\nimport {Field, Formik} from 'formik';\r\nimport s from './addMessageForm.module.css'\r\n\r\n\r\ntype DefaultTextareaPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\n// type DefaultSpanPropsType = DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>\r\n// type DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype FormPropsType = DefaultTextareaPropsType & {\r\n    callback: (newMessageTextarea: string) => void\r\n}\r\n\r\nexport const AddMessageForm = (props: FormPropsType) => {\r\n    const addNewMessage = (values: any) => {\r\n        props.callback(values.newMessage)\r\n    }\r\n\r\n    function validateUsername(value:string) {\r\n        let error;\r\n        if (value === '') {\r\n            error = 'Message is required';\r\n        }if ( value.length > 30 ){\r\n            error = 'Max length is 30 symbols '\r\n        }\r\n        return error;\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{newMessage: ''}}\r\n\r\n            onSubmit={addNewMessage}\r\n        >\r\n            {({\r\n                  values,\r\n                  errors,\r\n                  touched,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  handleSubmit,\r\n                  isSubmitting,\r\n\r\n              }) => (\r\n                <form onSubmit={handleSubmit}>\r\n\r\n                    <div>\r\n                        <div>\r\n                            <Field\r\n                                name=\"newMessage\"\r\n                                component=\"textarea\"\r\n                                placeholder=\"Enter your message\"\r\n                                validate={validateUsername}\r\n                                style={errors.newMessage && touched.newMessage && {border: '2px solid red'}}\r\n                            />\r\n                       </div>\r\n                        <span className={s.error}>{errors.newMessage}</span>\r\n                        <div>\r\n                            <button type=\"submit\" disabled={errors.newMessage ? true : false} >\r\n                                Send\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"addMessageForm_error__3lgQI\"};"],"sourceRoot":""}